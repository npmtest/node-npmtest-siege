{"/home/travis/build/npmtest/node-npmtest-siege/test.js":"/* istanbul instrument in package npmtest_siege */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-siege/lib.npmtest_siege.js":"/* istanbul instrument in package npmtest_siege */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_siege = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_siege = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-siege/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-siege && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_siege */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_siege\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_siege.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_siege.rollup.js'] =\n            local.assetsDict['/assets.npmtest_siege.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_siege.__dirname + '/lib.npmtest_siege.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-siege/node_modules/siege/siege.js":"var util = require('util')\n  , child_process = require('child_process')\n  , http = require('http')\n  , path = require('path')\n  , fs = require('fs')\n  , siege_attack = require('./siege_attack')\n  , __slice = Array.prototype.slice\n  ;\n\nvar Siege = function(path, options) {\n  if(!options) {\n    if(typeof path == 'object') {\n      options = path\n      path = undefined\n    } else {\n      options = {}\n    }\n  }\n\n  if(path) {\n    options.serve = path\n  }\n\n  options.tasks = []\n\n  this.tasks = []\n  this.options = options\n  this.current_task = null\n\n  var self = this\n  this.__defineGetter__('withCookie', function() {\n      self.options.enableCookie = true\n      return self\n  })\n\n  this.__defineGetter__('with304', function() {\n      self.options.enable304 = true\n      return self\n  })\n\n  this.__defineGetter__('withoutCookie', function() {\n      self.options.enableCookie = false\n      return self\n  })\n\n  this.__defineGetter__('without304', function() {\n      self.options.enable304 = false\n      return self\n  })\n}\n\nvar siege = Siege.prototype\n\nsiege.on = function(port) {\n  if(/\\d+/.test(port))\n    this.options.port = port\n  else\n    this.options.sockpath = port\n  return this\n}\n\nsiege.host = function(host) {\n  this.options.host = host\n  return this\n}\n\nsiege.hostname = function(hostname) {\n  this.options.hostname = hostname\n  return this\n}\n\nsiege.rejectUnauthorized = function(rejectUnauthorized) {\n  this.options.rejectUnauthorized = rejectUnauthorized\n  return this\n}\n\nsiege.requestCert = function(requestCert) {\n  this.options.requestCert = requestCert\n  return this\n}\n\nsiege.agent = function(agent) {\n  this.options.agent = agent\n  return this\n}\n\nsiege.sslProtocol = function(sslProtocol) {\n  this.options.sslProtocol = sslProtocol\n  return this\n}\n\nsiege.concurrent = function(concurrent) {\n  this.options.concurrent = concurrent\n  return this\n}\n\nsiege.describe = function(description) {\n  var task = this.current_task\n  if(!task || task.options.description) {\n    task = this._newtask()\n  }\n  task.options.description = description\n  return task\n}\n\nsiege.wait = function(wait) {\n  this.options.wait = wait\n  return this\n}\n\nsiege._newtask = function() {\n  var task = new Task(this)\n  this.tasks.push(task)\n  this.current_task = task\n  return task\n}\n\nsiege.request = function(options) {\n  var task = this.current_task\n  if(!task || task.options.method) {\n    task = this._newtask()\n  }\n  task.request(options)\n  return task\n}\n\nsiege.get = function(url, query) {\n  return this.request({\n      path: url\n    , method: 'GET'\n    , query: query\n  })\n}\n\nsiege.post = function(url, body) {\n  return this.request({\n      path: url\n    , method: 'POST'\n    , body: body\n  })\n}\n\nsiege.set = function(name, value) {\n  this.options.headers = this.options.headers || {}\n  this.options.headers[name] = value\n  return this\n}\n\nsiege.for = function(num) {\n  return new For(this, num)\n}\n\nsiege.report = function(options) {\n  this.options.report = options\n  return this\n}\n\nsiege.attack = function() {\n  var options = this.options\n  this.tasks.forEach(function(task){\n      options.tasks.push(task.options)\n  })\n  if(!options.port && !options.sockpath) {\n    options.sockpath = '/tmp/siege.sock'\n  }\n\n  queueSiege(this.options)\n}\n\nfunction SiegeWrap(siege) {\n  this.siege = siege\n}\n\nvar wrap = SiegeWrap.prototype\n\n// default wrap\n;['request', 'get', 'post', 'attack', 'describe'].forEach(function(name){\n  if(name[0] != '_') wrap[name] = function() {\n    var args = __slice.call(arguments)\n    return siege[name].apply(this.siege, args)\n  }\n})\n\nfunction Task(siege) {\n  this.siege = siege\n  this.options = {}\n  var self = this\n\n  this.__defineGetter__('withCookie', function() {\n      self.options.enableCookie = true\n      return self\n  })\n\n  this.__defineGetter__('with304', function() {\n      self.options.enable304 = true\n      return self\n  })\n\n  this.__defineGetter__('withoutCookie', function() {\n      self.options.enableCookie = false\n      return self\n  })\n\n  this.__defineGetter__('without304', function() {\n      self.options.enable304 = false\n      return self\n  })\n}\n\nutil.inherits(Task, SiegeWrap)\n\nvar task = Task.prototype\n\ntask.for = function(num) {\n  return new For(this, num)\n}\n\ntask.request = function(options) {\n  options.method = options.method || 'GET'\n  merge(this.options, options)\n}\n\ntask.concurrent = function(concurrent) {\n  this.options.concurrent = concurrent\n  return this\n}\n\n/**\n * options\n *    rps : true\n *    status: true\n *    timeout: true\n *    responseTime: ['max', 'min', 'max', 'most']\n *    weight: true\n *    graph: {\n *      dot: /path/to/dot.png\n *      line: /path/to/line.png // timebase\n *      c2mem: /path/to/c2mem.png // concurrent to memoryUsage\n *    }\n *    type: json | plain | color\n *\n */\ntask.report = function(options) {\n  this.options.report = options\n}\n\nfunction For(main, num) {\n\n  this.__defineGetter__('seconds', function() {\n      main.options.duration = num * 1000\n      return main\n  })\n\n  this.__defineGetter__('times', function() {\n      main.options.repeat = num\n      return main\n  })\n\n}\n\nfunction merge(target, source) {\n  for(var name in source) {\n    target[name] = source[name]\n  }\n}\n\nvar queue = [], started = false;\nfunction queueSiege(options) {\n  queue.push(options)\n  if(!started) {\n    started = true\n    nextSiege()\n  }\n}\n\nfunction nextSiege() {\n  var options = queue.shift()\n  if(!options) {\n    process.exit()\n  }\n  startSiege(options, nextSiege)\n}\n\nfunction startSiege(options, callback) {\n  startServe(options, function(child){\n      options.taskIndex = -1\n      var attack = siege_attack(options, endProgram)\n\n      function endProgram(){\n        if(child) child.kill()\n        attack.halt()\n        callback()\n      }\n\n      process.on('SIGINT', endProgram)\n\n      process.on('uncaughtException', function(err) {\n          console.log(err.stack)\n          endProgram()\n      })\n\n  })\n}\n\nfunction startServe(options, callback) {\n  var serve = options.serve;\n  if(!serve) return callback();\n\n  console.log('starting ' + serve);\n\n  var cmd = serve\n  var args = []\n  try{\n    require(serve)\n    cmd = 'node'\n    args = [__dirname + '/siege_server.js', '--port', options.sockpath || options.port || '/tmp/siege.sock', serve]\n  } catch(e){\n    cmd = cmd.split(/\\s+/g)\n    args = cmd.slice(1)\n    cmd = cmd[0]\n  }\n  var child = child_process.spawn(cmd, args)\n  var log = path.join(process.cwd(), options.serverlog || 'server.log')\n  var errlog = path.join(process.cwd(), options.servererrlog || 'server.error.log')\n  child.stdout.pipe(fs.createWriteStream(log))\n  child.stderr.pipe(process.stderr)\n\n  var wait = options.wait || 200\n  process.stdout.write('\\033[?25l')\n  var timer = setInterval(function(){\n      process.stdout.write('.')\n  }, wait / 30)\n  setTimeout(function() {\n      clearInterval(timer)\n      process.stdout.write('\\r\\033[K')\n      callback(child)\n  }, wait);\n}\n\nvar exports = module.exports = function(path, options) {\n  return new Siege(path, options)\n}\n","/home/travis/build/npmtest/node-npmtest-siege/node_modules/siege/siege_attack.js":"var http = require('http')\n  , https = require('https')\n  , querystring = require('querystring')\n  , util = require('util')\n  , cookiejar = require('cookiejar')\n  , CookieJar = cookiejar.CookieJar\n  , out = process.stdout\n  ;\n\n// http://bluesock.org/~willg/dev/ansi.html\n\nvar HIDE_CURSOR = '\\033[?25l'\nvar SHOW_CURSOR = '\\033[?25h'\nvar CLEAR_SCREEN = '\\033[2J'\nvar ERASE_LINE = '\\033[K'\nvar RESET_STYLE = '\\033[0m'\n\nfunction clearScreen() {\n  out.write(CLEAR_SCREEN)\n}\n\nfunction upLine(line) {\n  out.write('\\033[' + (line || 1) + 'A')\n}\n\nfunction gotoLine(line, col) {\n  out.write('\\033[' + (line | 0) + ';' + (col | 0) + 'H')\n}\n\n// 0-5\nfunction background(r, g, b) {\n  return '\\033[48;5;' + rgb5(r, g, b) + 'm'\n}\n\n// 0-5\nfunction forground(r, g, b) {\n  var code = rgb5(r, g, b);\n  return '\\033[38;5;' + code + 'm'\n}\n\n/**\n * Translates a 255 RGB value to a 0-5 ANSI RGV value,\n * then returns the single ANSI color code to use.\n */\n\nfunction rgb (r, g, b) {\n  var red = r / 51 // /255 * 5\n    , green = g / 51 // /255 * 5\n    , blue = b / 51 // /255 * 5\n  return rgb5(red, green, blue)\n}\n\n/**\n * Turns rgb 0-5 values into a single ANSI color code to use.\n */\n\nfunction rgb5 (r, g, b) {\n  var red = Math.round(r)\n    , green = Math.round(g)\n    , blue = Math.round(b)\n  return 16 + (red*36) + (green*6) + blue\n}\n\n// red to green\ngradeColors = [ 196, 202, 166, 172, 136, 142, 106, 112, 76, 46 ].map(function(color){\n    return '\\033[38;5;' + color + 'm'\n})\n// return grade color, big is better\nfunction gradeColor(value, worst, best) {\n  var score = (value - worst) / (best - worst)\n  score = Math.min(Math.max(score, 0), 1)\n  var index = Math.round(score * 9)\n  return gradeColors[index]\n}\n\nmodule.exports = function(options, callback) {\n\n  var taskIndex = 0\n    , globalJar\n    ;\n\n  out.write('\\n')\n\n  if(options.enableCookie) {\n    globalJar = new CookieJar()\n    out.write('\\033[38;5;46mEnable cookie\\033[0m\\n')\n  }\n\n  function nextTask() {\n\n    var task = options.tasks[taskIndex ++]\n    if(!task) {\n      if(callback) callback()\n      process.exit()\n    }\n\n    var enableCookie = task.enableCookie || (task.enableCookie === undefined && options.enableCookie)\n    var jar = enableCookie && (globalJar || new CookieJar())\n    var startTime = Date.now();\n    var intervalStart = startTime;\n    var intervalDone = 0;\n    var running = 0;\n    var done = 0;\n    var concurrent = options.concurrent || 15;\n    var repeat = task.repeat || options.repeat;\n    var duration = task.duration || options.duration;\n    if(!duration && !repeat) {\n      duration = 10000\n    }\n    if (options.sslProtocol && options.sslProtocol === true) {\n      concurrent = https.globalAgent.maxSockets = task.concurrent || options.concurrent || 15;\n    } else {\n      concurrent = http.globalAgent.maxSockets = task.concurrent || options.concurrent || 15;\n    }\n\n    var left = typeof repeat == 'undefined' ? Number.MAX_VALUE : repeat;\n\n    var min = Number.MAX_VALUE\n    var max = 0;\n    var avg = 0;\n    var rps = 0;\n    var errorsCount = 0;\n    var errors = {};\n    var status = {};\n\n    var sumTime = 0;\n\n    var headers = options.headers || {}\n\n    var requestOptions = {\n      path: task.path\n    , method: task.method\n    , headers: headers\n    }\n\n    if(options.sockpath) {\n      requestOptions.socketPath = options.sockpath\n    } else {\n      requestOptions.port = options.port\n      if (options.host) {\n        requestOptions.host = options.host\n      }\n      if (options.hostname) {\n        requestOptions.hostname = options.hostname\n      }\n    }\n    if (options.rejectUnauthorized) {\n      requestOptions.rejectUnauthorized = options.rejectUnauthorized;\n    }\n    if (options.requestCert) {\n      requestOptions.requestCert = options.requestCert;\n    }\n    if (options.agent) {\n      requestOptions.agent = options.agent;\n    }\n\n    var cookieAccessInfo = cookiejar.CookieAccessInfo(requestOptions.host, requestOptions.path)\n\n    function sendRequest() {\n      if(running > concurrent || left <=0) return;\n      if(running ++ < concurrent) process.nextTick(sendRequest);\n\n      if(enableCookie) {\n        headers['Cookie'] = jar.getCookies(cookieAccessInfo).map(function(cookie) {return cookie.toValueString()}).join(';')\n      }\n\n      // Add POST Headers for POST Requests\n      if(requestOptions.method === 'POST' && task.body) {\n        headers['Content-Type'] = 'application/x-www-form-urlencoded'\n        headers['Content-Length'] = querystring.stringify(task.body).length\n      }\n\n      var reqStartTime = Date.now();\n      var req;\n\n      // Add QueryString to URL for GET Requests with Parameters\n      if(requestOptions.method === 'GET' && task.query) {\n          // Reset query string if present\n          var hasQuery = requestOptions.path.indexOf('?')\n          if(hasQuery > 0) {\n            requestOptions.path = requestOptions.path.substring(0,hasQuery)\n          }\n          requestOptions.path = requestOptions.path + \"?\" + querystring.stringify(task.query)\n      }\n\n      if (options.sslProtocol && options.sslProtocol === true) {\n        req = https.request(requestOptions,handleRequest);\n      } else {\n        req = http.request(requestOptions,handleRequest);\n      }\n\n      function handleRequest(res) {\n\n          if(enableCookie) {\n            var cookies = res.headers['set-cookie']\n            if(cookies) jar.setCookies(cookies)\n          }\n\n          res.on('end', function() {\n              var resEndTime = Date.now();\n              var elapsed = resEndTime - reqStartTime;\n              if(elapsed < min) min = elapsed;\n              if(elapsed > max) max = elapsed;\n              sumTime += elapsed;\n              intervalDone ++;\n              done ++;\n              status[res.statusCode] = (status[res.statusCode] || 0) + 1\n\n              endRequest();\n          })\n\n          res.resume()\n\n      }\n\n      req.on('error', function(err){\n          var data = errors[err.message];\n          if(!data) {\n            data = errors[err.message] = {\n              message: err.message\n            , stack: err.stack\n            , count: 1\n            }\n            if(!firstTime) {\n              upLine(5)\n              out.write('\\033[K\\n\\033[K\\n\\033[K\\n\\033[K\\n\\033[K\\n')\n              upLine(5)\n            }\n            console.log(err.stack)\n            firstTime = true\n          }\n          data.count ++\n          errorsCount ++\n          endRequest()\n      })\n\n\n      // Add POST Body for POST requests\n      if(requestOptions.method === 'POST' && task.body) {\n          req.write(querystring.stringify(task.body));\n      }\n\n      req.end();\n\n      function endRequest() {\n        if(--left == 0) {\n          endTask();\n        }\n        running --;\n        process.nextTick(sendRequest);\n      }\n    }\n\n\n    function updateTaskData() {\n      var now = Date.now()\n      avg = sumTime / done;\n      rps = done * 1000 / (now - startTime)\n      realtime_rps = intervalDone * 1000 / (now - intervalStart)\n      intervalStart = now\n      intervalDone = 0\n      reportData()\n    }\n\n    var firstTime = true;\n    function reportData(type) {\n      switch(type) {\n        case 'csv':\n        out.write(util.format('\\r%s:%s\\t%s(done)\\t%s(rps)\\t%s(curr rps)\\t%sms(min)\\t%sms(max)\\t%sms(avg)'\n          , task.method\n          , task.path\n          , done\n          , gradeColor(rps, 1000, 5000) + parseInt(rps) //+ RESET_STYLE\n          , gradeColor(realtime_rps, 1000, 5000) + parseInt(realtime_rps)// + RESET_STYLE\n          , gradeColor(min, 50, 10) + parseInt(min) //+ RESET_STYLE\n          , gradeColor(max, 50, 10) + parseInt(max) //+ RESET_STYLE\n          , gradeColor(avg, 50, 10) + parseInt(avg) //+ RESET_STYLE\n        ));\n        break\n        default:\n        if(!firstTime) {\n          upLine(5)\n        }\n        out.write('\\n\\033[K' + task.method + ':' + task.path)\n        if(task.enableCookie !== undefined) {\n          out.write(enableCookie ? (forground(0, 5, 0) + ' with cookie') : (forground(5, 5, 0) + ' without cookie'))\n          out.write(RESET_STYLE)\n        }\n        out.write('\\n\\033[K\\tdone:' + done + (errorsCount ? ('\\terrors:' + forground(5,0,0) + errorsCount + RESET_STYLE) : '' ))\n        out.write('\\n\\033[K')\n        Object.keys(status).forEach(function(code){\n            var score\n            if(code >= 500) {\n              score = 0\n            } else if(code >= 400) {\n              score = 3\n            } else if (code >= 300) {\n              score = 8\n            } else if (code >= 200) {\n              score = 10\n            } else {\n              score = 7\n            }\n            if (options.sslProtocol && options.sslProtocol === true) {\n              out.write('\\t' + gradeColor(score, 0, 10) + code + RESET_STYLE + ' ' + https.STATUS_CODES[code] + ': ' + status[code])\n            } else {\n              out.write('\\t' + gradeColor(score, 0, 10) + code + RESET_STYLE + ' ' + http.STATUS_CODES[code] + ': ' + status[code])\n            }\n        })\n        out.write(\n          util.format('\\n\\033[K\\trps: %s\\n\\033[K\\tresponse: %sms(min)\\t%sms(max)\\t%sms(avg)\\033[K'\n          , gradeColor(rps, 2000, 7000) +  parseInt(rps)  + RESET_STYLE\n          , gradeColor(min, 50, 10) +  parseInt(min)  + RESET_STYLE\n          , gradeColor(max, 50, 10) +  parseInt(max)  + RESET_STYLE\n          , gradeColor(avg, 50, 10) +  parseInt(avg)  + RESET_STYLE\n        ))\n        out.write(HIDE_CURSOR)\n      }\n      firstTime = false\n    }\n\n    function endTask () {\n      var ending = Date.now();\n      left = 0;\n      updateTaskData()\n      console.log('')\n      clearInterval(timer)\n      if(timeout) clearTimeout(timeout)\n      process.nextTick(nextTask)\n    }\n\n    var timer = setInterval(updateTaskData, 100);\n\n    var timeout = duration && setTimeout(endTask, duration)\n\n    sendRequest();\n\n  }\n\n  nextTask()\n\n  function halt() {\n    out.write(SHOW_CURSOR)\n  }\n\n  return {\n    halt: halt\n  }\n\n}\n\n","/home/travis/build/npmtest/node-npmtest-siege/node_modules/siege/siege_server.js":"var http = require('http')\n  , path = require('path')\n  , program = require('commander')\n\n// jade options\n\nvar options = {};\n\n// options\n\nprogram\n  .version('0.0.1')\n  .usage('[options] [dir|file ...]')\n  .option('-p, --port <str>', 'filename used to resolve includes')\n\nprogram.on('--help', function(){\n  console.log('');\n});\n\nprogram.parse(process.argv);\n\nvar APP = program.args[0]\nvar PORT = program.port\nconsole.log('starting siege_server %s', APP)\n\nif(!APP || !PORT) throw new Error('node siege_server.js --port port app.js')\n\nvar app = require(APP)\n\nif(!app) throw new Error('app not found, ' + APP)\n\nconsole.log('try to listen at %s', PORT);\nhttp.createServer(app).listen(PORT)\nconsole.log('server listen at %s', PORT)\n"}